
import arcade
import time
#Made by Raghav

# Constants
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 400
BALL_RADIUS = 10
PADDLE_WIDTH = 10
PADDLE_HEIGHT = 60
PADDLE_SPEED = 5

WON = []

#Pong Game Class
class PongGame(arcade.Window):
    def __init__(self, width, height):
        super().__init__(width, height, "Pong Game")
        arcade.set_background_color(arcade.color.BLACK)
        
        # Initialize the ball
        self.ball_x = SCREEN_WIDTH // 2
        self.ball_y = SCREEN_HEIGHT // 2
        self.ball_dx = 5
        self.ball_dy = 5
        self.key_pressed = None
        self.key_released = None

        self.game_over = False
        
        # Initialize the paddles
        self.left_paddle_y = SCREEN_HEIGHT // 2
        self.right_paddle_y = SCREEN_HEIGHT // 2

        # Initialize time variables
        self.total_time = 0.0
        self.timer_text = arcade.Text(
            text="00:00:00",
            start_x=SCREEN_WIDTH - 50,
            start_y=SCREEN_HEIGHT - 50,
            color=arcade.color.WHITE,
            font_size=20,
            anchor_x="center",
        )

        #Initalize score tracker
        self.score = 0

    #Draw time framework, score, ball, and paddles
    def on_draw(self):
        if (self.game_over):
            if (self.score >= 5):
                arcade.draw_text("YOU LOSE!", SCREEN_WIDTH //2, SCREEN_HEIGHT//2 - 100, arcade.color.BLACK, font_size = 50, anchor_x = "center")
                
                WON.append(False)
                
                arcade.finish_render()
                time.sleep(2.5)
                arcade.exit()
            else:
                arcade.draw_text("YOU WIN!", SCREEN_WIDTH //2, SCREEN_HEIGHT//2 - 100, arcade.color.BLACK, font_size = 50, anchor_x = "center")
                
                WON.append(True)
                
                arcade.finish_render()
                time.sleep(2.5)
                arcade.exit()
        else:
            arcade.start_render()

            #Framework for the score
            self.score_text = arcade.Text(
                text="Total: " + str(round(self.score/2)),
                start_x=60,
                start_y=SCREEN_HEIGHT - 50,
                color=arcade.color.WHITE,
                font_size=20,
                anchor_x="center",
            )

            #Draw score and timer on screen
            self.score_text.draw()
            self.timer_text.draw()
            
            # Draw the ball
            arcade.draw_circle_filled(self.ball_x, self.ball_y, BALL_RADIUS, arcade.color.WHITE)
            
            # Draw the paddles
            arcade.draw_rectangle_filled(PADDLE_WIDTH//2, self.left_paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT, arcade.color.WHITE)
            arcade.draw_rectangle_filled(SCREEN_WIDTH - PADDLE_WIDTH//2, self.right_paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT, arcade.color.WHITE)

    def update(self, delta_time):
        """
        Update the paddle positions and ball positions
        Check collisions with the ball and paddle
        """

        #Continuously moving paddle up/down based on key pressed
        if self.left_paddle_y != SCREEN_HEIGHT:
            if self.key_pressed == arcade.key.UP:
                self.left_paddle_y += PADDLE_SPEED
        
        if self.left_paddle_y != 0:
            if self.key_pressed == arcade.key.DOWN:
                self.left_paddle_y -= PADDLE_SPEED

        # Update ball position
        self.ball_x += self.ball_dx
        self.ball_y += self.ball_dy

        #Match position of paddle with teh ball
        if(self.ball_y != self.right_paddle_y):
            self.changePos = self.ball_y - self.right_paddle_y
            self.right_paddle_y += self.changePos
        
        # Check for collision with paddles
        if self.ball_x - BALL_RADIUS <= PADDLE_WIDTH and self.left_paddle_y - PADDLE_HEIGHT//2 <= self.ball_y <= self.left_paddle_y + PADDLE_HEIGHT//2:
            self.ball_dx = abs(self.ball_dx)
        elif self.ball_x + BALL_RADIUS >= SCREEN_WIDTH - PADDLE_WIDTH and self.right_paddle_y - PADDLE_HEIGHT//2 <= self.ball_y <= self.right_paddle_y + PADDLE_HEIGHT//2:
            self.ball_dx = -abs(self.ball_dx)
        
        # Check for collision with top and bottom walls
        if self.ball_y - BALL_RADIUS <= 0 or self.ball_y + BALL_RADIUS >= SCREEN_HEIGHT:
            self.ball_dy *= -1

        #Update on score based on number of times ball goes out of screen
        if self.ball_x == 0:
            self.score += 1

        #Update timer to be displayed for the screen and make sure time doesn't exceed limit
        if self.total_time < 30.0 and self.score < 5:
            self.total_time += delta_time
            seconds = int(self.total_time) % 60
            seconds_100s = int((self.total_time - seconds) * 100)
            self.timer_text.text = f"{seconds:02d}:{seconds_100s:02d}"
        else:
            self.game_over = True

    #Methods to update position of paddle on left based on pressing/release of key
    def on_key_press(self, key, modifiers):
        self.key_pressed = key

    def on_key_release(self, keyRelease, modifiers):
        keyRelease = self.key_released
        
#Main method running entire program
def pong():
    game = PongGame(SCREEN_WIDTH, SCREEN_HEIGHT)
    arcade.run()
    game.close()
    arcade.exit()
    return(WON)
